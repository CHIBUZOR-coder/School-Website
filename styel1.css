 .box {
   color: blueviolet;
   height: 50px;
   background-color: blue;
 }

 /* .apple {
   height: 100%;
   width: 100%;
 } */


 * {
   margin: 0;
 }

 .gd {
   color: white;
 }


 .greeksPhoto {


   height: fit-content;


 }


 .block {
   position: absolute;
   margin-left: 36%;

   height: 70%;
 }


 .ball {
   position: relative;
   text-align: center;
   top: 8vh;


 }

 .bull {
   position: relative;
   text-align: center;
   top: 8vh;
   right: 10%;


 }

 .fast {
   position: relative;
   margin-top: 4%;

 }





 .nn {

   margin-top: 10%;
 }

 .pas {
   margin-top: 4%;

 }

 .pass {
   margin-top: 10%;
 }


 .ptt {
   color: white;

 }





 .lunch {
   margin-top: 3%;

 }


 .h2b {
   margin-top: 10%;
 }

 .cla {
   color: aqua;
   margin-top: 0%;
 }









 .huse {
   position: relative;

 }





 body {
   position: relative;
 }

 .general-background {
   background-color: rgb(44, 17, 70);
   min-height: 90vh;
   width: 100vw;
   position: relative;
   overflow-y: hidden;
 }

 .home-page {

   background-color: rgb(15, 2, 27);
   min-height: 100vh;
   width: 100%;
 }



 .dgh {
   background-color: rgb(44, 17, 70);
   min-height: 70vh;
   width: 100vw;
   /* position: relative; */
   color: aqua;
 }


 .bfh {
   background-color: rgb(44, 17, 70);
 }

 .home {
   width: 100%;
   height: 80vh;
   background-image: url(/Work-project-1/imajes/page-image2.webp);

   background-repeat: no-repeat;
   background-size: cover;
   background-position: center;

 }



 .con{

   height: 60vh;
   width: 100%;


   background-image: url(imajes/edu.jpg);


   background-repeat: no-repeat;
   background-size: cover;
   background-position: center;

 }

 .book {
   width: 100vw;
   position: absolute;
   background-size: cover;
   text-align: center;
   min-height: 30vh;

 }

 .blow {
   background-color: azure;
   width: 100vw;
   height: 30vh;
   text-align: center;
   border: 2px solid yellow;

 }

 /*.con {

   margin-top: 4%;

   text-align: center;
   color: white;

 }*/
.con {

   

 background-color:pink;
 

}

 .conn {

   border-radius: 8px;
   text-align: center;


   background-color: rgb(44, 17, 70);

 }

 .conn-under {

   height: 20vh;
 }


 .contact-button {

   float: right;
   margin-top: 5px;

 }

 .footer {

   padding-top: 3%;



 }





 /* 
 .bby {
   background-image: url("./imajes/code.jpg");
   background-size: cover;
   background-repeat: no-repeat;
   background-attachment: fixed;
   background-position: center;

 } */



 .recoverPage {
   background-color: rgb(44, 17, 70);
   border-radius: 8px;
   margin-top: 5%;
   width: 30%;
   min-height: 70vh;

 }

 .imj {
   width: 15%;
   margin-left: -5%;
 }

 .imja {
   width: 20%;
   margin-left: 36%;
 }


 .imjb {
   width: 13%;
   margin-left: -6%;

 }


 .imjp {
   width: 19%;
   margin-left: -8%;

 }

 .imjj {
   width: 21%;
   margin-left: -4%;
 }

 .fb {
   margin-left: -2%;

 }

 .sip {
   position: relative;
   text-align: right;
   width: 50%;

 }

 .bip {
   text-align: center;

 }

 .lol {
   position: relative;
   margin-top: 5%;

 }

 .prd {
   text-align: center;
 }



 .ulist {

   margin-left: 80px;

 }


 /* 
  
 @media screen and (m-width:400px) {
 } */

 @media screen and (min-width:600px) {

   .greeksPhoto {
     min-height: 40%;
   }


   .conn {
     position: relative;
     width: 40%;


   }



 }



 @media screen and (max-width:500px) {

   .received-chats {
     position: absolute;
     width: 100%;
   }

   .outgoing-chat-msg {

     position: absolute;
   }
 }

 /* 
@media screen and (max-width:500px) {

  .mge2{

margin-right: ;

  }
  

} */


 @media screen and (max-width:420px) {

   body {
     position: relative;

     .conn {
       width: 100%;

       .form-row {

         width: 104%;
       }

       .msg-header-img {}
     }

     /* overflow-x: hidden; */
   }




   fixing small imges to be responsive */ .imgg {
     margin-left: -30px;
   }

   .conn {
     width: 30%;
   }

   .form-row {

     width: 100%;
   }

   .conn-under {
     height: 40vh;
   }

   .chatting {
     min-height: 90vh;
   }

   .chat-page {
     height: 100%;
   }

 }


 @media screen and (min-width:700px) {

   body {
     position: relative;
     overflow-x: hidden;

   }

   .conn-under {
     height: 60vh;
   }

 }


 @media screen and (min-width:900px) {

   body {
     position: relative;
     overflow-x: hidden;

   }

   .conn {
     width: 30%;
   }

 }



































 .imjb {
   margin-left: -5;

 }


 .general-background {
   position: relative;
   background: rgb(44, 17, 70);
   min-height: 120vh;
 }


 .dgh {
   background: rgb(44, 17, 70);
 }


 .bull {
   position: relative;
   text-align: center;
 }


 .greeksPhoto {
   height: 30%;
 }


 .prd {
   text-align: center;
 }


 .fir {
   background-color: rgb(108, 108, 231);
   width: 20vh;
   min-height: 5vh;
 }









 /* chat Styling */

 .chatting {
   width: 500 !important;
   margin: auto;
   margin-top: 4%;
   font-family: sans-serif;
   letter-spacing: 0.5px;
 }

 .mge {
   width: 7%;
   border-radius: 70%;
   float: left;
   margin: 10px 0 0 20px;
 }


 .msg-header {
   border: 1px solid #ccc;
   width: 100%;
   margin-bottom: -10px;
   border-bottom: none;
   display: inline-block;
   background-color: #007bff;

 }

 msg-header-img {
   border-radius: 50%;
   width: 10%;
   margin-left: 5%;
   margin-top: 12px;
   float: left;

 }


 .activee {
   width: 120px;
   float: left;
   margin-top: 10px;
 }

 .activee h4 {
   font-size: px;
   margin-left: 10px;
   color: #fff;
 }

 .activee h6 {
   font-size: 10px;
   margin-left: 10px;
   color: #fff;
   line-height: 2px;
 }

 .msg-inbox {
   border: 1px solid #ccc;
   overflow: hidden;
   padding-bottom: 40px;

 }

 .chats {
   padding: 30px 15px 0 25px;
 }


 .msg-page {
   height: 70vh;
   overflow-y: auto;
   width: 100%;
   margin-left: -5px;
 }

 .mge2 {
   width: 20px;
   margin: 0px 20px;

   float: left;
   border-radius: 100%;

 }

 .time {
   color: #777;
   display: block;
   font-size: 12px;
   margin: 8px 0 0;
 }

 .received-chats {
   float: left;
   margin: 18px 0 0 0;
   border: 10px rgb(0, 1, 5);
   width: 70%;

   padding: 0 0 2px;
 }

 .received-msg-inbox {

   margin-left: 50px;
 }

 .received-chats p {

   background: #efefef none repeat scroll 0 0;
   color: #646464;
   border-radius: 10px;
   margin: 0;
   padding: 5px 10px 15px 12px;
   font-size: 14px;


 }





 /* DownRow */
 .down-row {

   border: 6px rgb(45, 39, 80);

   margin: 16% 0 0 0;
 }

.home-page{
  color:#999 ;
}

 .none-list ul li {


   list-style-type: none;
 }

 a{
text-decoration: none;
color: #999;

 }


.copp{
  color: #3f1f69;
}


















 /* out going  */


 .outgoing-chat-msg {
   float: right;
   margin: 18px 0 0 0;
   border: 10px rgb(0, 1, 5);
   width: 70%;

   padding: 0 0 2px;
 }

 .outgoing-chat-msg p {
   background: #efefef none repeat scroll 0 0;
   color: #646464;
   border-radius: 10px;
   margin: 0;
   padding: 5px 10px 15px 12px;
   font-size: 14px;
 }

 .img3 {
   width: 20px;
   margin: 0 20px;

   float: right;
   border-radius: 20%;
   margin-bottom: 40px;

 }



 .outgoing-msg-inbox {
   margin-right: 50px;



 }


 .input-container {
   position: relative;
 }

 .input-container i {
   position: absolute;
   top: 50%;
   right: 10px;
   transform: translateY(-50%);
   color: #999;
   font-size: 20px;
   pointer-events: none;
 }


 .modalClass {

   background-color: blue;
   float: right;
   margin-right: 5px;

 }

 /*
css rule: The css rule includes
1. A selector: this is the tag  that points where you want to decorate.
example [h1 can be a selector to piont that you are decorating all elements inside the h1 tag. same goes for other tags] 

2.Declaration block: This is the space where you inpute your declarations properties and their values i.e colours, fonts, margins, paddings{for properties}  and {the type or quantites of selected properties are known} as values 

3.Declarations: these consists of  the actual properties plus the value of the properties i.e colour is a property, and the value is the  type of property i.e colour you want. 

4.Properties [examples are: coulours, fonts, borders e.t.c

5.Values: examples are: pxls, ems, % e.t.c*

 
 Ways of locating where to style 
 
  


 /* There are two ways of locating a particular section or point in your code that you wish to style with css.

3. Using decendants: after writing the selectors, you give space before writting the decendant of that selector. 

4. Using children: after writing the selectors, you use the pointy arrow > before indicating the specific child you wish to add

Both examples are shown above but the one on use is id. which implies usage of #.  using the class, you poin from one tag to anther in a wat that leeds to the actual point you want to style. the names in both id and class should be correct in pointing where you want to style 


Note: When you select a colour, it affects only the text. but background colour affects the background of the area your class or id is pointing to.
I noticed that class and id can be usd to style in group. but the tutor says that id are ment to be unique, so i shldnt use them in group styling. instead, i should use class.

Divs and Span:

divs: div works like section. it is used for styling in block level. [it is a block level element]



span: it is used for styling inline[within the text] i.e any word in a sentence that is coverd with span can be styled seperately by tha span. [span is an inline element]

 Inheritance: this is telling us that, what ever style a parent element is given will be inherited by the children element[ execpt if the children element is specifically styled]



 Last rule: css uses the lat command or rule of style you give and it overwrites the first rule or style you have earlier given.






 Specificity meaesurement in css: check w3school for better informaton








 universal selector: This is a general selector that styles every element in the page and styles them at once. it has the list amout of specificity.
 the tag is shown below.
  
 {in here, you write your style commands}



 Colour property: wstyles the colour of the text

 Background colour: styles the colour of the  background. the background has a short cut which allows you to merg many prperties.[ baground: [here you can write as many prpwerties you wannt, whith their values.

 rgb coulos [r-red, g-green, b[blue]: This helps to mix colours, giving you more colour options. Imputs are from 0-225. red[225,0, 0.
                      green[0,225,0]
                       blue[0,0,225]
                       black[0,0,0]
                       white[225,225,225]
Apart from these combination, you can make other combinations by changing the numbers.


rgba: this is still rgb colours nut the a here helps to increse or decrease the opacity. you can adjust the [a] from 0-1.


HSl and HEx::

Hex: this works like rgb, covering the spectrom of red, green and blue colours. Ti uses letters [from a-f] instead of numbers. red[ff,00,00][the coma is not inclusive wen styling with hex [na me just put am.
                        green[00,ff00]
                        blue[00,00,ff]
                        black[00,00,00,00][but you can stil put three zeros instead of six and it will still mean same thing]
                        white[ffffffff] or [ffffff]







                        Note: you ca get more colour hex codes in a website[coolers.com]




                        Absolute and relative values:
                       A.. Absolute values: an absolute value is not dependent on any thing [whatver sise you put for an absolute value will always remain the same even for a small and big screen] and if you out smthimg big, it will fit a biger browser while a smaller browser may need scrolling due to the fact that the sise will not reduce in the smaller browser. An example of absolute value is pixels unit[px],




                        Units in css: Units are being used on properties[i.e font-size, width e.t.c]
                        Examples of units:
                        1. Pixels: This is an absolute unit of measurement. One pixel is equals one dot on the browser.[The reason pixels are absolute is because their given size remains the same both in a small and big browser]


                        R... Relative values: These depends on a parent elememnt before they can be displayed properly and visually. 
                        Example of relative values: Percent%: depennds on a parent element. [i continued this topic in my other workspacce[style.css] becaues i am making examples there.




                        Typography in css: This basically means text on our page[] These text on [page are divided into 3 given by my tutor.
                        1. Properties: They are used in styling our page.
                         An example of propertiy is listed below 
                        



                        1. Properties[ Font family property]: the font family property, basically discribes the font of an element.

                        examples are:
                        1. font-sie[we already
                        coverd this]

                        2. Font-family: it gives yu a list of font you can use for your text. oppend with a css tag.


                        3. font-stack: Somtimes , the font we pick may not be compatible for some browsers. The font-stack ac allows addition of more than one font to give the browser an options to pick the font that is compatibile with it. It has no tag, it is a sudjestion in emmet i.e when you are trying to write your chosen font, you will see other fonts attarched to it. if you pic the multiple font sudjestions, then you have chosen font-stack.

                        4. Generic font family: Tt is a generally acceptd font for all browsers that looks better than default fonts.  it is part of the font-stack emmet sudjestion [ it is always the third in the emmet list]. 

                        5. Google fonts: Adds more font choices we can use to desgn our texts.

                         Other properties: 
                         5. Font-style : examples are italic, obleque etc.
                         Font-style is diffrent from font family. font-family is the type of font while font-style changes the look of the font-family.
                        
                         6. Font-weight: the thickness of the font.

                         7. Text align: This defines the position of the font[left, right ot center].

                         8.Text indent: This gives paragraph spacing in first line.

                         9.line-height [line spacing]:This is the amount of space between two lines. this can be used from emmet sudjestions.

                         10.Letter-spacing: Spacing between letters. Can be found in emmet sudjestions.

                         11.Word-spacing:Spacing between two words. Can be found in emmet sudjestions

                         12.Text-transform: Transforming text to upper case, lower, none, unset, capitalise, initial e.t.c
                         this can be found in emmet sudjestion.

                         13.Text-decouration: Helps add or remove thimgs like lines in texts. examples are overline,
                          underline,
                           line-through[this draws line on a text i.e rulling out or cancelling a text.

                           Note: You can also add line- hight[earlier discuased, num9] properties to text decouration..
                           







                           Css Box model: A picturee have been downloaded to shoe box model clearly.
                           1.Paddings:This is the space between  content and the edge of border.
                           when adding paddings, if you put two values, you have the first will affect top and buttom, while the second will affect left and right respectively. But if put four values, then it will affect the four side in a clockwise direction, starting from the top.

                           2.Margin: The distance between the screen and other elements. they will worl exactly the same as explained with the padding. you can use negative valuse for margins 

                           3. Border radiuos:  this shapens the four coner edges of the border. works like padding and margin
                           4. Outline:This is between the border and margin. [it is not shown in box model diagrams.[ Outline is similar to border but has one edge over border[it can take th border awaay from the content[using positive values or inside the content[using negative values, using outline-offset with the emmet sudjestion. I will show an example.

                           Other css properties:
                           ...Display: by default, every element is either block-kevel element or in-line  elements
                           
                           Block level elements and In line elements.

                           1. Block level elements:[Elements that use up the whole horizonntal space causing the the next block element to star from a new . Examples ar  h1, div, p, ul e.t.c

                           2.In line elements:[Elements that arrange themeslvs in the horizontal space, filling only as much space as their content. they they do not start a new line excpt if other elements like them have finished space in the privious line. Exaples are spam, a, imj, bottonss etc

                           I once had an experience of this wen enginer austine gave me a work. i now know the solution to it.

                           3.Inline-block: Block-level elements are known to to take up all horizontal space, no matter how small they are. inline-block makes the element a block-level element that will not take all the horizontal space[they will be like inline elements.[ this may sole the problem i once encounterd, am not sure though.


                           2. Horizontal Centering: This is a way of centering or alining elements and contents, using text-aling properties.
                           Note: to center inline elements, we use txt     aline, while we use margin properties to center block level elements. If we use text aline fir the block eements, only the content of that block element will be allinged center. Therefore, block elements use, margin properties.

                           Note:Later on, after learning the css flex boox and greed, it will be more prefarable in centering elements with css. This is because they offer more options and they are straight farward.

                           Note: Browser respects top, bottom margin and padding for block level elements, but does not respect it for inline element.

                           ...List-style-type: this helps in the numbering or number-styling of a list, using roman numerals and other styles.


                           ...Box-sizing: This helps to channel padding increase inside the box model. although, it may temper with your content layout. But its is much better because if padding is added without using box-sizing,then the pading wll be added outside the box model[ almost like a margin.]


                           [Display:none]: This takes out  visibility. It actually removes an element and its content from a folder, almost like deeting it.

                           Opacity: This reduces or increase visibility. Its values are from 0-1, with one as the maximum value.
                           [ it works like rgba colour values.

                           Visibility: this also removes visibility. but its difference from display:none is that a trace of it can be seen in the developer tools.

                           Note: the visibility and opacity just hides the elements. but the dislay none actually take the elements annd its content out of the folder[deleting it.




                           Using imajes as backgrounds [background imajes}:
                            Examples showing these are at the stye1.css page.
                           
                           Background-reapeat: This is the repeatation of bacground pictures. it is mostly a default settinggs for every background picture. 
                           But mostly happens if the chice of the background picture is small. It can be avoided by using a big picture for backgrnd image. It can also be repaired using backgroumd repeat properties, setting it to no reapeat if the imaje is big enouugh But the most effective way is to use the background-size property.

                           background-size: This gives the background imaje or background a size that can cover the whole text.setting it to cover will make the picture cover the background of the element that has that background. but this can affect the picture viewing qality[stretching a small picture will be blury since it originally is too small to fit that backgrond.

                           note: using the background posiining, the background picture can be moved and postioned at the center. It will be visible if the picture used is small. It will also have an effect if the picture used is a big picture, but the effect will seen if looked at closely.  The background positioning propertis  has many units.



                           Background-attarchment: This property gives the background image a unit like [fixed positioning] or other types of positioning units. With the fixed positioning, only the texts can be scrolled. While the background image will remain fixed, causing the texts to move over the background image wen a user is scrolling.



                           gradiants and css:  The gradiants has alot in terms of styling [i need to check an external link to know more about it.But we will be using it for somthing in this video: 
                           
                           Based on what we did, gradient is used to make multiple colours in a background [ just like rainbow colours]. The colour change starts from top to bottom by defalt. But you can change this to your prefered start point.

                           You can also use degrees[deg] to direct the start point of the colour change. Meaning, the colour will cover the degree you have chosen, starting from the colour you pick firt.

                           You can also direct the colour chabge by word direction. [to top ]
                                      [top left]
                                      [btom right]
                                      [to bottom ]

                           We can also use rgba colours. Directins are inclusive





                           Combining gradients with background imaje:Sometimes,the lights or brigjtness of a background imaje may make text not so visible. The linear gradient helps make the text visibe by darkening the background imaje using rgbacolours.  



                           Float and Clear properties:
                           
                           Float: Floted elements floats on a seperate layer above the normal flow of a code and the elements next to it will follow the nornal flow of code which will now apear beneth the floated element. 
                           Note:The inline content i.e the  text in the element that  enters the normla flow of code[ which is beneth the floated element] does not hide under the floted elements.Rather, it wraps itself around the  floated element. Sometimes, the float is to make sure that thenext elements goes under to the normal flow of code.

                            


                            Clear: The clear helps for the element after the foated element to  be placed in the next line [To clear theline space where a floated element occupies. or to drop any element below the line wich the floted  elements occupy. Sometimes, you can say to take the follow up element back to  where it was before. All depends on what follows the floated element and how it can be repaied using the clear property.

                              Clear actually  makes the follow up elements skip one line of the normal flow of  code] instead of moving under the floated element.\

                              Clear left: Drop below things that are floated to the left.

                              Clear right: Drop below things that are floated to the right

                              Clear both: Drop below things that are floted to both the left and right.




                              OverfloW: Normally, backgrounds does not consider a floted item withing it. this is why if the floated item is bigger than the background and you add a colour. the colour wil only touch the part of the floated item that is same sise as the background. 

                              The overflow property helps the backgrund to wrap a floted element.

                              Positions::after

                              1. Static: This goes with the normal flow of code. it is a position that is set to default by the brower.

                              2.Relative: this is moving an elements relative from its normal position[Away from its normal position. The count for the  unit of movement starts from its original position[It only cares about the elements original i.e where it was placed before being moved relatively]. position. The relative  , keeps elements in normal documents flow.

                              3. Absolute: This removes elements from normal document flow. And these elements will be placed relative to the closest avalliable parent. If there is no close parent, then the element will use the body as its parent Abslute removes document out of normal document flow.
                              note: The Position absolute completly removes the element from the document flow,causing the browser to act as that element dosnt even exist at all.

                              Note: The relative position acts like the static position, it allows you to do four diffent things that the static dont [ which are: movment in four directions.] This movement is always going to be relative to where it was before. But in general, you wont be using the four movement wen using a relative positioning cuz it moves your elemnt out of the document flow [but not completely unlike absolute that completely removes the document out of th document flow]. 
                              And this may lead to you having to do some rearrangements with the other elements, to make the document arranged
            





                              3. sticky: This is a reletive/fixed combined. It is relative by default, and become fixed upon reaching the unit of which they have been placed to be fixed.  They are relative elements that becomes absolute at a desired point where you have chosen them to stic to the page. some point[the point  elements that gets sticky at some pint of the  screen.


                              4.Position
                                fixed:They seem like the absolute but they dnt need any parent to function[they are positioned based on the entire html page and not a parent]. When they are placed at a point,they remain at thst spot[the place where you have put them] as the page is been scrolled by the user.
                              

                              General note: Position absolute and Position relative gets used for top,bottom,left and right.



                              Media Queries:This is a way of styling for different screen, using min-properties[ height,  width,]. it allows for different styling on different screen size.

                              Note: When styling using media queries, the old styling properties will remain if they are not overwritten[ changed].



                              Z-index/ Z-axis: this helps to change the view position of slantly postione imajes. It only works under relative and absolute positioning [cannot work on a static positioning.



                              Pseudo elements:  This styles spesififc parts of elements. They can do so before and after the element. They can be used to add contents[maby texts] before and after the content of a paragraph. and these added cntents can be styled. The transition tag is responsible for the slide movement of the squares behind the image. The examples are shown in test3.html.
                               
                              Psudo classes and elements:

                              1. Classes:




                              Transform, Trnsition and Animation:

                              1. transform: This property is used to apply some kind of transformation to elements.
                              Examples of this transformations are listed below

                              1. Translaional: this happens along either x or y axis.[moving the boxes ]

                              . Rotation: This rotates the boxes around x,y and z axis. But it is prefarable to use the z, bcus it can do all kindns of rotation without causing your box to disappear unlike the  x and y axis.

                              . Scaling:This increases the size of the box slong x and y axis, using number values.


                              . Skewing: this skews the box left of right direction. Also can skew both x and y.

                              all these examples of transform are shoen at test3.html


                              2.Transition: This sets the time in which change of state of an element occurs. [
                                e.g when you hover, transition controls the time in whic your selected hover effect occurs].
                                
                             3.Animation: this also controls change over time, and it also can be responsible in making the change[controls how the change from one state to another takes place. it can cause change from 0-100% of the running time that changes take place.
                             Css variales: this involves saving stylings thst can be used and reused once entered in the place it is tombe used. it ahud be nested in the root or any parent, then it can be used on the childern of that parent or root. i already made an examle in which i saved the virable inside the root element.
                             Icons: They are used while making a page, mostly at the top of the page(eg, the facebook icon). 
                           you can get free font icons at a web page(fontawsome.com).
                           Text Shadow property/Box shadow property:
                           they considers x axis,yaxis, blur and color.
                           You can get more shadows from a website or external resources(textshadow generator and boxshadow generator)



                           note: if you want to know the compartible browsers for your code, chek an external resource (caniuse.com). In there, you search for a desired style typr or property and it shows browswers and their cmpartabiliy with the code.

                           you can get your css written by auto with a an external link(autoprefixer)
                            
                           
                             















































































 */
